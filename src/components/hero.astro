---
import { Image } from 'astro:assets';

// Data
import { basics, languages } from '@cv';

// Components
import Section from '@/layouts/Section.astro';

// Icons
import FlagColombia from '@/components/icons/Colombia.astro';

// Actions Icons
import IconEnvelope from '@/components/icons/envelope.astro';
import IconPhone from '@/components/icons/phone.astro';

// Social Icons
import GitHub from '@/components/icons/github.astro';
import LinkedIn from '@/components/icons/linkedin.astro';
import Telegram from '@/components/icons/telegram.astro';

// Theme Icons
import IconSun from '@/components/icons/sun.astro';
import IconMoon from '@/components/icons/moon.astro';

// Speaks Icons
import ES from '@/components/icons/ES.astro';
import US from '@/components/icons/US.astro';

const { name, label, image, email, phone, location, profiles } = basics;
const { city, region } = location;

const SOCIAL_ICONS: Record<string, string | any> = {
	GitHub,
	LinkedIn,
	Telegram
};

const SPEAK_ICONS: Record<string, string | any> = {
	ES,
	US
};
---

<Section class='flex flex-col items-start justify-between gap-8 lg:flex-row-reverse'>
	<figure class='mx-auto max-w-[130px]'>
		<Image
			class='aspect-square overflow-hidden rounded-full object-cover shadow-2xl'
			src={image}
			alt={name}
			inferSize={true}
			loading='eager'
		/>
	</figure>
	<div class='flex flex-col justify-center text-center lg:text-left'>
		<h1 class='mb-3 flex flex-col justify-center gap-3 text-3xl lg:flex-row lg:justify-normal'>
			{name}
			<span class='flex justify-center gap-2'>
				{
					languages.map(i => {
						const Icon = SPEAK_ICONS[i.flag];
						return <Icon class='size-5' title={`${i.language} - ${i.fluency}`} />;
					})
				}
			</span>
		</h1>
		<h2 class='mb-1 text-base font-normal'>{label}</h2>
		<p class='mb-3 flex items-center justify-center gap-2 font-extralight lg:justify-normal'>
			{city} - {region}
			<FlagColombia />
		</p>

		<div class='mt-3 flex justify-center gap-1 lg:justify-normal'>
			{
				email && (
					<a
						href={`mailto:${email}`}
						title={`Enviar un correo electrónico a ${name} al correo ${email}`}
						target='_blank'
						rel='noopener noreferrer'>
						<IconEnvelope />
					</a>
				)
			}
			{
				phone && (
					<a
						href={`tel:${phone}`}
						title={`Llamar por teléfono a ${name} al número ${phone}`}
						target='_blank'
						rel='noopener noreferrer'>
						<IconPhone />
					</a>
				)
			}
			{
				profiles.map(({ network, url, username }) => {
					const Icon = SOCIAL_ICONS[network];

					return (
						<a
							href={url}
							title={`Visitar el perfil de ${name} (${username}) en ${network}`}
							target='_blank'
							rel='noopener noreferrer'>
							<Icon />
						</a>
					);
				})
			}

			<button title='Activar o desactivar el modo oscuro.' id='themeToggle'>
				<IconSun class='hidden dark:block' />
				<IconMoon class='block dark:hidden' />
			</button>
		</div>
	</div>
</Section>

<style>
	a,
	button {
		@apply rounded border border-secondary/25 p-1 text-lg text-secondary/80 transition hover:border-primary hover:bg-primary hover:text-white dark:border-neutral-100/25 dark:text-neutral-300 dark:hover:text-neutral-800;
	}
</style>

<script is:inline>
	const theme = (() => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}

		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			return 'dark';
		}

		return 'light';
	})();

	if (theme === 'light') {
		document.documentElement.classList.remove('dark');
	} else {
		document.documentElement.classList.add('dark');
	}

	window.localStorage.setItem('theme', theme);

	const handleToggleClick = () => {
		const element = document.documentElement;
		element.classList.toggle('dark');

		const isDark = element.classList.contains('dark');
		localStorage.setItem('theme', isDark ? 'dark' : 'light');
	};

	document.getElementById('themeToggle').addEventListener('click', handleToggleClick);
</script>
